package View;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Timer;
import Packages.ComputerTableModel;
import Packages.ID;
import Packages.Packet;
import Utils.Utils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.TimerTask;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;

public class ServerUI extends javax.swing.JFrame implements Runnable {

    private final int mainServerPort = 999;
    private final int transferFilePort = 1111;
    private final int trackingUserPort = 2222;
    private final int manageProcessesPort = 3333;
    Timer timer;
    ComputerTableModel tm;

    public ServerUI() {
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);
        jTable1.setModel(new ComputerTableModel(new ArrayList()));
        tm = (ComputerTableModel) jTable1.getModel();

        // Cập nhật list socket sau mỗi 1s
        timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                tm.updateAllElement();
            }
        }, 1000, 1000);

        runThreadTransferFile();
        runThreadTrackingUser();
        runThreadManageProcesses();
    }

    @Override
    public void run() {
        try {
            ServerSocket server = new ServerSocket(mainServerPort);
            while (true) {
                Socket socket = null;
                try {
                    socket = server.accept();
                    tm.addElement(socket);
                } catch (IOException ex) {
                }
            }
        } catch (IOException ex) {
        }
    }

    // <editor-fold defaultstate="collapsed" desc="runThreadTransferFile"> 
    private void runThreadTransferFile() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    ServerSocket server = new ServerSocket(transferFilePort);
                    while (true) {
                        Socket client;
                        try {
                            client = server.accept();
                            new SendFile(client);
                        } catch (IOException ex) {
                        }
                    }
                } catch (Exception ex) {
                }
            }
        }).start();
    }
    // </editor-fold> 

    // <editor-fold defaultstate="collapsed" desc="runThreadTrackingUser">   
    private void runThreadTrackingUser() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    ServerSocket server = new ServerSocket(trackingUserPort);
                    while (true) {
                        Socket socket;
                        try {
                            socket = server.accept();
                            new Thread(new TrackingUser(socket)).start();
                        } catch (IOException ex) {
                        }
                    }
                } catch (Exception ex) {
                }
            }
        }).start();
    }
    // </editor-fold> 

    // <editor-fold defaultstate="collapsed" desc="runThreadManageProcesses"> 
    private void runThreadManageProcesses() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    ServerSocket server = new ServerSocket(manageProcessesPort);
                    while(true) {
                        Socket client;
                        try {
                            client = server.accept();
                            new Thread(new ProcessList(client)).start();
                        } catch (IOException ex) {
                        }
                    }
                } catch (Exception ex) {
                }
            }
        }).start();
    }
    // </editor-fold> 
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/chat.png"))); // NOI18N
        jButton1.setText("Chat client");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/notify.png"))); // NOI18N
        jButton2.setText("Gửi thông báo");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/file.png"))); // NOI18N
        jButton3.setText("Gửi file");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/tracking.png"))); // NOI18N
        jButton4.setText("Theo dõi client");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cmd.png"))); // NOI18N
        jButton7.setText("Gửi lệnh Shell");
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton7);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/process.png"))); // NOI18N
        jButton5.setText("Quản lý tiến trình");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(50);
        }

        jTabbedPane1.addTab("Thông tin các máy trạm", jScrollPane1);

        jMenu1.setText("Quản lý máy trạm");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jTable1.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn máy để chat!");
            return;
        }
        Socket client = tm.getItem(jTable1.getSelectedRow());
        
        new Thread(new ChatToClient(client)).start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jTable1.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn máy để gửi thông báo!");
            return;
        }
        int[] rowsSelected = jTable1.getSelectedRows();
        List<Socket> listClient = new ArrayList();
        for (int i : rowsSelected) {
            listClient.add(tm.getItem(i));
        }

        new SendMessageToClients(listClient);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (jTable1.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn máy để gửi lệnh shell!");
            return;
        }
        Socket client = tm.getItem(jTable1.getSelectedRow());

        new Thread(new SendShell(client)).start();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (jTable1.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn máy để gửi file!");
            return;
        }
        Socket client = tm.getItem(jTable1.getSelectedRow());

        Packet pkTF = new Packet(ID.FileTransfer);
        pkTF.setMessage(String.valueOf(transferFilePort));
        Utils.sendMess(client, pkTF.toString());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (jTable1.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Bạn chưa chọn máy để theo dõi!");
            return;
        }
        Socket client = tm.getItem(jTable1.getSelectedRow());

        // Gửi lệnh yêu cầu client kết nối đến socket server remote desktop
        Packet pkTU = new Packet(ID.Tracking);
        pkTU.setMessage(String.valueOf(trackingUserPort));
        Utils.sendMess(client, pkTU.toString());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        int rowindex = jTable1.getSelectedRow();
        if (rowindex < 0) {
            return;
        }
        
        Socket client = tm.getItem(rowindex);
        
        if(evt.isPopupTrigger() && evt.getComponent() instanceof JTable) {
            JPopupMenu p = new JPopupMenu();
            JMenuItem item1 = new JMenuItem("Khoá máy");
            JMenuItem item2 = new JMenuItem("Mở máy");
            p.add(item1);
            p.add(item2);
            
            item1.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    Packet pkFS = new Packet(ID.Fullscreen);
                    Utils.sendMess(client, pkFS.toString());
                    tm.updateState(client, "Đã khoá");
                }
            });
            
            item2.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    Packet pkOK = new Packet(ID.OK);
                    Utils.sendMess(client, pkOK.toString());
                    tm.updateState(client, "Đang hoạt động");
                }
            });
            
            p.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTable1MouseReleased

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (jTable1.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Bạn chưa chọn máy để thao tác!");
            return;
        }
        Socket client = tm.getItem(jTable1.getSelectedRow());

        Packet pkProc = new Packet(ID.Process);
        pkProc.setMessage(String.valueOf(manageProcessesPort));
        Utils.sendMess(client, pkProc.toString());
    }//GEN-LAST:event_jButton5ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
